<template>
    <button 
        :class="buttonClass"
        :type="type"
        @click="emit('click')"
    >
        <slot />
    </button>
</template>

<script>
export default {
    props: {
        type: {
            type: String,
            default: 'button'
        },
        block: {
            type: Boolean,
            default: false
        },
        label: {
            type: String,
            default: null
        },
        loading: {
            type: Boolean,
            default: false
        },
        disabled: {
            type: Boolean,
            default: false
        },
        padded: {
            type: Boolean,
            default: true
        },
        size: {
            type: String,
            default: "md",
        },
        color: {
            type: String,
            default: "white",
        },
        variant: {
            type: String,
            default: "solid",
        },
        icon: {
            type: String,
            default: null
        },
        loadingIcon: {
            type: String,
            default: null
        },
        leadingIcon: {
            type: String,
            default: null
        },
        trailingIcon: {
            type: String,
            default: null
        },
        trailing: {
            type: Boolean,
            default: false
        },
        leading: {
            type: Boolean,
            default: false
        },
        square: {
            type: Boolean,
            default: false
        },
        truncate: {
            type: Boolean,
            default: false
        },
    },
    
    data(){
        return {
            buttonClass: ""
        }
    },

    mounted(){
        this.refreshClass();      
    },

    methods: {
        refreshClass() {
            this.$style = { ...this.$style, ...cmmv.styleSettings };
            const isSquare = this.square || (!this.default && !this.label);
            const variant = this.$style.button.color?.[this.color]?.[this.variant] || this.$style.button.variant[this.variant];

            this.buttonClass = [
                this.$style.button.base, 
                this.$style.button.font, 
                this.$style.button.default,
                this.$style.button.rounded,
                this.$style.button.size[this.size],
                this.$style.button.gap[this.size],
                this.padded && this.$style.button[isSquare ? 'square' : 'padding'][this.size],
                this.block ? this.$style.button.block : this.$style.button.inline,
                variant?.replaceAll("%color%", this.color),
                this.class
            ];
        }
    }
}
</script>